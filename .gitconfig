[github]
	user = pkryger
[user]
    email = pkryger@gmail.com
	name = Przemysław Kryger

[core]
    # Use a global gitattributes file for applying attribute rules to all
    # repositories
    attributesfile = ~/.gitattributes_global

    # -X: Keep the content visible after closing the pager
    # -R: Ensures that color codes and other control characters in the output
    #  (e.g., from 'git diff --color') are properly displayed in the pager.
    pager = less -X -R

    # Displays non-ASCII file names in their original form instead of quoted
    # octal sequences.
    quotepath = off

    # Prevent showing files whose names contain non-ASCII symbols as
    # unversioned.
    precomposeunicode = false

[log]
    # Display dates as YYYY-MM-DD
    date = iso

[init]
    defaultBranch = main

[push]
    # This configuration automatically pushes the current branch, which helps
    # prevent the error: “fatal: The current branch BRANCH has no upstream
    # branch.”  When this setting is in place, Git will push the current branch
    # to the remote, assuming the branch has an upstream set.
    default = current

    # This setting automatically sets up remote tracking for new branches,
    # eliminating the need to manually run git branch --set-upstream-to after
    # creating a new branch. It automates the process of linking local branches
    # to their corresponding remote branches. This is particularly useful for
    # users who frequently create new branches, as it reduces the need for
    # repetitive configuration.
    autoSetupRemote = true

[pull]
    # This configuration automatically pulls the current branch, which helps
    # prevent "There is no tracking information for the current branch. Please
    # specify which branch you want to merge with. See git-pull(1) for
    # details. git pull <remote> <branch>"
    default = current


[branch]
    # Configures `git branch` to sort branches by most recently used rather
    # than alphabetically, making it easier to locate active branches.
    sort = -committerdate

    # Automatically sets up an upstream (merge) tracking branch when creating a
    # new branch from a remote-tracking branch This allows 'git pull' and 'git
    # push' to work without specifying the remote/branch
    autoSetupMerge = true

[merge]
    # Uses the 'zdiff3' conflict style for merges, which includes additional
    # context by showing the base, local, and remote versions of conflicting
    # changes in a more readable format, making it easier to resolve complex
    # conflicts.
    conflictStyle = zdiff3

    # Before executing a merge, automatically stash all uncommitted changes in
    # the working directory and index. This ensures the merge proceeds without
    # interference from local modifications. Once the merge completes, the
    # stashed changes are reapplied, restoring the developer's original working
    # state.
    autoStash = true

    # Display a brief summary describing what was merged. This includes
    # information such as the merged branch names and the number of commits.
    summary = true

    # Display a diffstat after the merge completes, which summarizes the
    # changes made, showing how many lines were added and removed in each file.
    diffstat = true

    # Include up to 60 commit messages from the merged branch in the merge
    # commit message. This provides historical context and helps reviewers
    # understand the scope of the merge.
    log = 60

    # Enables the inclusion of branch descriptions in merge commit messages,
    # providing more context about the branches being merged.
    branchdesc = true

[grep]
    lineNumber = true

[rebase]
    # Create a stash of any local changes before starting a rebase. After the
    # rebase is complete, the stash is reapplied.
    autoStash = true

[diff]
    # Diff algorithm for improved diff accuracy, especially in detecting moved
    # code blocks.
    #
    # Patience diff is better at handling reordered text blocks by identifying
    # unique lines first and using a longest-increasing subsequence algorithm
    # for optimal alignment. It results in more intuitive and human-readable
    # diffs.  Compared to histogram-based algorithms, patience diff focuses on
    # matching meaningful lines, avoiding superficial matches, which leads to
    # more accurate content representation.
    #
    algorithm = histogram
    # algorithm = patience

    # Enable highlighting of moved lines in diffs. This helps identify blocks
    # of code that have been moved within a file, making it easier to track
    # code movement and understand refactoring changes.  Values: no, default,
    # plain, blocks, zebra, dimmed-zebra Details: `man git-diff`
    colorMoved = plain

    # Configures Git to detect file copies in addition to renames during diff
    # generation. This helps identify files that were copied, improving the
    # accuracy of the diff output for changes involving file copying.
    renames = copies

    # Sets the maximum number of renames to detect in a diff. When there are
    # more than this number of renames, Git will stop trying to detect renames
    # to avoid performance degradation. The default is 1000, but increasing it
    # can help in repos with many file renames.
    renameLimit = 2400

# Custrom drivers for git diff/merge. With this drivers, Git can display diffs
# at the function level, making them cleaner and more relevant. It highlights
# changes within the function, rather than showing the entire function as
# modified, which improves the clarity of code reviews and merges.
[diff "elisp"]
       xfuncname = ^\\([^[:space:]]*def[^[:space:]]+[[:space:]]+([^()[:space:]]+)

[diff "cpp"]
      xfuncname = "!^[ \\t]*[A-Za-z_][A-Za-z_0-9]*:[[:space:]]*($|/[/*])\n^((::[[:space:]]*)?[A-Za-z_][A-Za-z_0-9]*[[:space:]]*\\(.*)$\n^((#define[[:space:]]|DEFUN).*)$"

[diff "m4"]
      xfuncname = ^((m4_)?define|A._DEFUN(_ONCE)?)\\([^),]*

[diff "make"]
      xfuncname = ^([$.[:alnum:]_].*:|[[:alnum:]_]+[[:space:]]*([*:+]?[:?]?|!?)=|define .*)

[diff "shell"]
      xfuncname = ^([[:space:]]*[[:alpha:]_][[:alnum:]_]*[[:space:]]*\\(\\)|[[:alpha:]_][[:alnum:]_]*=)

[diff "texinfo"]
      xfuncname = ^@node[[:space:]]+([^,[:space:]][^,]+)

[rerere]
    # The "reuse recorded resolution" (rerere) feature, which helps Git
    # automatically resolve merge conflicts by reusing previously recorded
    # conflict resolutions. The setting enabled = 1 indicates that the rerere
    # feature is enabled.
    enabled = 1

    # After a conflict is resolved manually, Git will automatically store the
    # resolution in the rerere cache, making it available for future use.
    autoUpdate = true

[alias]
    # Difftastic aliases, so `git dlog` is `git log` with difftastic and so on.
    # As per https://difftastic.wilfred.me.uk/git.html#regular-usage
    dlog = -c diff.external=difft log --ext-diff
    dshow = -c diff.external=difft show --ext-diff
    ddiff = -c diff.external=difft diff --ext-diff
